Problem Statement:

Given an array nums and an integer target.
Return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.

Example 1:
Input: nums = [1,1,1,1,1], target = 2
Output: 2
Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).

Example 2:
Input: nums = [-1,3,5,1,4,2,-9], target = 6
Output: 2
Explanation: There are 3 subarrays with sum equal to 6.
([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.

Example 3:
Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10
Output: 3

Example 4:
Input: nums = [0,0,0], target = 0
Output: 3


SOlution:
class Solution:
    def maxNonOverlapping(self, nums: List[int], target: int) -> int:
        """left=0
        runningsum=0
        intervals=set()
        for right in range(len(nums)):
            runningsum+=nums[right]
            while runningsum>target:
                runningsum-=nums[left]
                left+=1
            if runningsum==target:
                intervals.add((left,right))
        print(intervals)
        """
        ####### O(N);O(N)
        prefix=0
        cnt=0
        previndex=-1
        prevsum=defaultdict(int)
        prevsum[0]=-1
        for i in range(len(nums)):
            prefix+=nums[i]
            if (prefix-target) in prevsum:
                if prevsum[(prefix-target)]>=previndex:
                    cnt+=1
                    previndex=i
            prevsum[prefix]=i
        return cnt
