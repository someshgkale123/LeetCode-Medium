Problem Statement:

Given a string S of digits, such as S = "123456579", we can split it into a Fibonacci-like sequence [123, 456, 579].
Formally, a Fibonacci-like sequence is a list F of non-negative integers such that:
0 <= F[i] <= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);
F.length >= 3;
and F[i] + F[i+1] = F[i+2] for all 0 <= i < F.length - 2.
Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.
Return any Fibonacci-like sequence split from S, or return [] if it cannot be done.

Example 1:
Input: "123456579"
Output: [123,456,579]

Example 2:
Input: "11235813"
Output: [1,1,2,3,5,8,13]

Example 3:
Input: "112358130"
Output: []
Explanation: The task is impossible.

Example 4:
Input: "0123"
Output: []
Explanation: Leading zeroes are not allowed, so "01", "2", "3" is not valid.

Example 5:
Input: "1101111"
Output: [110, 1, 111]
Explanation: The output [11, 0, 11, 11] would also be accepted.


Solution:
class Solution:
    def splitIntoFibonacci(self, S: str) -> List[int]:
        
        ######## O(N^N); O(N)
        self.ans=[]
        def getfib(S,temp):
            if not S:
                
                # if length of temp is greater i.e first 2 numbers add up and create other numbers 
                if len(temp)>2:
                    self.ans=temp
                return 
            
            # for each split i.e splitting by 1 till len(S)
            for each in range(1,len(S)+1):
                
                # if already got fib sequence, return
                if self.ans:
                    return
                
                # current number
                number=int(S[:each])
                
                # if number > 23 bit signed integer, break the fib sequence
                if number > 2**31 - 1:
                    break
                
                # if there's leading zero, break the sequence
                if each>1 and S[0]=="0":
                    break
                
                # if first two numbers are not filled
                if len(temp)<=1:
                    getfib(S[each:],temp+[number])
                else:
                    
                    # if last two numbers add up to number, look for next sequence else try another number 
                    if (temp[-1]+temp[-2])==number:
                        getfib(S[each:],temp+[number])
                    
        getfib(S,[])
        return self.ans
