Problem Statement:

Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers
Return True if its possible otherwise return False.

Example 1:
Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].

Example 2:
Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].

Example 3:
Input: nums = [3,3,2,2,1,1], k = 3
Output: true

Example 4:
Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.


Solution:
class Solution:
    def isPossibleDivide(self, nums: List[int], k: int) -> bool:
        if len(nums)%k!=0:
            return False
        split=len(nums)//k
        counter=collections.Counter(nums)
        nums=sorted(set(nums))
        
        curr=[[] for i in range(split)]
        
        start=0
        #print(nums)
        for i in nums:
            for each in range(counter[i]):   
                if each+start>=len(curr):
                    return False
                if not curr[each+start] or curr[each+start][-1]==i-1:
                    curr[each+start]+=[i]
                   
            while start<len(curr) and len(curr[start])==k:
                start+=1
                
        for part in curr:
            if len(part)!=k:
                return False
        return True
        
