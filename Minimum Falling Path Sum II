Problem Statement:

Given a square grid of integers arr, a falling path with non-zero shifts is a choice of exactly one element from each row of arr, such that no two elements chosen in adjacent rows are in the same column.
Return the minimum sum of a falling path with non-zero shifts.

Example 1:
Input: arr = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: 
The possible falling paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
The falling path with the smallest sum is [1,5,7], so the answer is 13.



Solution:
class Solution:
    def minFallingPathSum(self, arr: List[List[int]]) -> int:
     ######## O(N*N),O(1)
        def getmin(row):
            m1=float("inf")
            indx1=0
            m2=float("inf")
            indx2=0
            for elem in range(len(row)):
                #print(m1,m2)
                if row[elem]<=m1:
                    m2=m1
                    m1=row[elem]
                    indx2=indx1
                    indx1=elem
                elif row[elem]<m2:
                    m2=row[elem]
                    indx2=elem
            return indx1,indx2
        
        for i in range(1,len(arr)):
            col1,col2=getmin(arr[i-1])
            #print(col1,col2)
            for j in range(len(arr[0])):
                if j==col1:
                    arr[i][j]+=arr[i-1][col2]
                else:
                    arr[i][j]+=arr[i-1][col1]
        #print(arr)
        return min(arr[-1])
