Problem Statement:

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
   
Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
       
        def construct(new,inorder,preorder):
            if not inorder:
                return
            
            new=TreeNode(preorder.pop(0))
            
            left=inorder[:inorder.index(new.val)]
            right=inorder[inorder.index(new.val)+1:]
            
            
            
            new.left=construct(new,left,preorder)
            new.right=construct(new,right,preorder)
            return new
        
        return construct(TreeNode(0),inorder,preorder)
        
        """
        ######## O(N); O(N) using hasmap to store indices will furthur optimize the code
        def getindex(preorder,low,high):
            if low>=high:
                return None
            new=TreeNode(preorder.pop(0))
            new.left=getindex(preorder,low,inorder.index(new.val))
            new.right=getindex(preorder,inorder.index(new.val)+1,high)
            return new
        return getindex(preorder,0,len(preorder))
        """
            
