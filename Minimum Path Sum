Problem Statement:

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

Example:
Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1â†’3â†’1â†’1â†’1 minimizes the sum.


Solution:
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        dp=[[0]*len(grid[0])]*len(grid)
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if i==0 and j==0:
                    dp[i][j]=grid[i][j]
                else:
                    a,b=float("inf"),float("inf")
                    if (i-1)>=0 and (i-1)<len(grid):
                        a=grid[i][j]+dp[i-1][j]
       
                    if (j-1)>=0 and (j-1)<len(grid[0]):
                        b=grid[i][j]+dp[i][j-1]
                    
                    mini=min(a,b)
                    
                    dp[i][j]=mini
                
        return(dp[len(dp)-1][len(dp[0])-1])
        
