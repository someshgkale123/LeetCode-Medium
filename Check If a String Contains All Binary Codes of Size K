Problem Statement:

Given a binary string s and an integer k.
Return True if every binary code of length k is a substring of s. Otherwise, return False.

Example 1:
Input: s = "00110110", k = 2
Output: true
Explanation: The binary codes of length 2 are "00", "01", "10" and "11". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.

Example 2:
Input: s = "00110", k = 2
Output: true

Example 3:
Input: s = "0110", k = 1
Output: true
Explanation: The binary codes of length 1 are "0" and "1", it is clear that both exist as a substring. 

Example 4:
Input: s = "0110", k = 2
Output: false
Explanation: The binary code "00" is of length 2 and doesn't exist in the array.

Example 5:
Input: s = "0000000001011100", k = 4
Output: false



Solution:
class Solution:
    def hasAllCodes(self, s: str, k: int) -> bool:
        
        ######### O(nk);O(2**k)
        
        similar=set()
         
        total=2**k
        if k>len(s) or len(s)-k+1<total:
            return False
       
        
        left=0
        temp={"0":0,"1":0}
        for each in range(k-1):
            temp[s[each]]+=1
            
        for each in range(k-1,len(s)):
            
            temp[s[each]]+=1
            if s[left:each+1] not in similar:
                similar.add(s[left:each+1])
                    
            temp[s[left]]-=1
            left+=1
            
        return len(similar)==total
