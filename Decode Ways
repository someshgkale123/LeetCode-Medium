Problem Statement:

A message containing letters from A-Z is being encoded to numbers using the following mapping:
'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.
The answer is guaranteed to fit in a 32-bit integer.

Example 1:
Input: s = "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).

Example 2:
Input: s = "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

Example 3:
Input: s = "0"
Output: 0
Explanation: There is no character that is mapped to a number starting with '0'. We cannot ignore a zero when we face it while decoding. So, each '0' should be part of "10" --> 'J' or "20" --> 'T'.

Example 4:
Input: s = "1"
Output: 1


Solution:
class Solution:
    def numDecodings(self, s: str) -> int:
        #### Iterative O(N);O(N)
        """
        # Initializing dp with zeros
        dp = [0]*(len(s)+1)
        
        # for empty string i.e. for 0 there will be 1 way to decode 
        dp[0]=1
        
        # If leading zero present, set 0 otherwise 1
        dp[1] = 1 if s[0]!='0' else 0
        
        
        for i in range(2,len(dp)):
            # picking one digit
            first = int(s[i-1:i])
            
            #picking two digits
            second = int(s[i-2:i])
            
            # if one digit is between the range [1,10] add 1 to previous number
            if 1<=first<=10:
                dp[i]+=dp[i-1]
            
            # if two digits are in range [10,26], add 1 to previous number i.e. two digit behind
            if 10<=second<=26:
                dp[i]+=dp[i-2]
            
        return dp[len(s)]
        """
        ######### O(N); O(N)
        visited={}
        
        def getways(s,temp):
            # if empty string, return 1 way
            if not s:
                return 1
            
            # if temp already present, return the previous computation value
            if temp in visited:
                return visited[temp]
            
            pickone=0
            picktwo=0
            # pick one digit
            if 1<=int(s[:1])<=10:
                pickone=getways(s[1:],temp+s[:1])
            
            #pick two digits
            if 10<=int(s[:2])<=26:
                picktwo=getways(s[2:],temp+s[:2])
            
            # add to visited with count
            visited[temp]=pickone+picktwo
            return visited[temp]
        
        return getways(s,"")
        
        
