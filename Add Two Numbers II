Problem Statement:

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:
Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7



Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        """new=ListNode()
        curr=new
        lengthl1=0
        traversel1=l1
        while traversel1:
            lengthl1+=1
            traversel1=traversel1.next
        
        lengthl2=0
        traversel2=l2
        while traversel2:
            lengthl2+=1
            traversel2=traversel2.next
        
        while lengthl1 !=0 and lengthl2!=0:
            #print(l1.val,l2.val,curr.val,lengthl1,lengthl2)
            carry=0
            if lengthl1>lengthl2:
                curr.next=ListNode(l1.val)
                lengthl1-=1
                l1=l1.next
                
            elif lengthl1<lengthl2:
                curr.next=ListNode(l2.val)
                lengthl2-=1
                l2=l2.next
                
            else:
                value=l1.val+l2.val
                carry=value//10
                curr.next=ListNode(value%10)   
                l1=l1.next
                l2=l2.next
                lengthl1-=1
                lengthl2-=1
            if carry>0:
                curr.val+=carry
            curr=curr.next
        return new
        """
        ############ O(n+m+max(n,m)) here the max length of n or m will dominate the whole term, O(max(n,m))
        def getstack(listn,stack):
            while listn:
                stack.append(listn.val)
                listn=listn.next
            return stack
        
        stackl1=getstack(l1,[])
        stackl2=getstack(l2,[])
        
        carry=0
        ans=None
        while stackl1 or stackl2:
            if stackl1:
                x=stackl1.pop()
            else:
                x=0
            if stackl2:
                y=stackl2.pop()
            else:
                y=0
            value=x+y+carry
            carry=value//10
            ans=ListNode(value%10,ans)
        if carry:
            ans=ListNode(carry,ans)
        return ans
        
