Problem Statement:

We are given an array A of positive integers, and two positive integers L and R (L <= R).
Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.

Example :
Input: 
A = [2, 1, 4, 3]
L = 2
R = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
Note:
L, R  and A[i] will be an integer in the range [0, 10^9].
The length of A will be in the range of [1, 50000].


Solution:
class Solution:
    def numSubarrayBoundedMax(self, A: List[int], L: int, R: int) -> int:
        """
        ####### Initial approach O(N)
        cnt=0
        i=0
        j=0
        temp=[]
        while i<=j:
            print(temp,i,j)
            if temp:
                if L<=max(temp)<=R:
                    cnt+=j-i

                else:
                    temp.pop(0)
                    i+=1
                    continue
            if j<len(A):
                temp.append(A[j])
                j+=1
            else:
                break
      
        return cnt
        """
        ###### O(N),O(1)
        start=-1
        end=-1
        ans=0
        for i in range(len(A)):
            if L<=A[i]<=R:
                end=i
            elif A[i]>R:
                end=i
                start=i
                continue
                
            ans+=end-start
            
        return ans
                
                
                
