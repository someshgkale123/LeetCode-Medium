Problem Statement:

Given an N x N grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized and return the distance.
The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.
If no land or water exists in the grid, return -1.

Example 1:
Input: [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: 
The cell (1, 1) is as far as possible from all the land with distance 2.

Example 2:
Input: [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: 
The cell (2, 2) is as far as possible from all the land with distance 4.


Solution:
class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        """
        ### greater than O(N*N)
        lands={}
        def bfs(i,j):
            queue=deque([[i,j,0]])
            while queue:
                r,c,val=queue.popleft()
                adjacents=[(1,0),(0,1),(-1,0),(0,-1)]
                for i,j in adjacents:
                    adr,adc=r+i,c+j
                    if adr>=len(grid) or adr<0 or adc>=len(grid[0]) or adc<0:
                        continue
                    if grid[adr][adc]==0:
                        #mdist=val+abs(r-adr)+abs(c-adc)
                        if (adr,adc) in lands:
                            if lands[(adr,adc)]>val+1:
                                lands[(adr,adc)]=val+1
                                queue.append([adr,adc,lands[(adr,adc)]])
                        else:
                            lands[(adr,adc)]=val+1
                            queue.append([adr,adc,lands[(adr,adc)]])
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    bfs(i,j)
                
        return -1 if not lands else max(lands.values())
        """
        
        #### O(N*N),O(N) here N is total number of elements in grid
        lands=set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    lands.add((i,j))
        if not lands or len(lands)==len(grid)**2:
            return -1
       
        adjacents=[(1,0),(0,1),(-1,0),(0,-1)]
        queue=deque(lands)
        mxdist=-1
        while queue:
            size=len(queue)
            mxdist+=1
            for i in range(size):
                r,c=queue.popleft()
                for ud,lr in adjacents:
                    adr,adc=r+ud,c+lr
                    if adr>=len(grid) or adr<0 or adc>=len(grid[0]) or adc<0:
                        continue
                    if grid[adr][adc]==0:
                        queue.append((adr,adc))
                        grid[adr][adc]=1
            
        return mxdist
 
