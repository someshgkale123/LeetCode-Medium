Problem Statement:

Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.
Return the intersection of these two interval lists.
(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  
The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  
For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

Example 1:
Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
Reminder: The inputs and the desired output are lists of Interval objects, and not arrays or lists.


Solution:
class Solution:
    def intervalIntersection(self, A: List[List[int]], B: List[List[int]]) -> List[List[int]]:
        """
        if not A or not B:
            return []
        allintervals=sorted(A+B)
        #print(allintervals)
        res=[]
        i=0
        j=1
        while j!=len(allintervals):
            a,b,c,d=allintervals[i][0],allintervals[i][1],allintervals[j][0],allintervals[j][1]
            if b>=c and b<=d:
                res+=[[c,b]]
                i=j
                j=i+1
            elif b>c and b>d:
                res+=[[c,d]]
                j+=1
            else:
                i=j
                j=i+1
        return res
        """
        res=[]
        i=0
        j=0
        while i!=len(A) and j!=len(B):
            a,b,c,d=A[i][0],A[i][1],B[j][0],B[j][1]
            if a<=c<=b or a<=d<=b or c<=a<=d or c<=b<=d:
                res+=[[max(a,c),min(b,d)]]
            if b<d:
                i+=1
            else:
                j+=1
        return res
