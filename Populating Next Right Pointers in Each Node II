Problem Statement:

Given a binary tree

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.
Initially, all next pointers are set to NULL.

Follow up:
You may only use constant extra space.
Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.
 
Example 1:
Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. 
The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.




Solution:
"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return
        """
        ######## O(N), O(N)
        queue=deque([root])
        while queue:
            prev=None
            for i in range(len(queue)):
                curr=queue.popleft()
                if prev:
                    prev.next=curr
                if curr.left:
                    queue.append(curr.left)
                if curr.right:
                    queue.append(curr.right)
                prev=curr
        return root
        """
        
        ######## O(N); O(1)
        leftmost=root
        while leftmost:
            curr=leftmost
            leftmost=None
            prev=None
            
            while curr:
                if curr.left:
                    if not leftmost:
                        leftmost=curr.left
                    if prev:
                        prev.next=curr.left
                    prev=curr.left
                
                if curr.right:
                    if not leftmost:
                        leftmost=curr.right
                    if prev: 
                        prev.next=curr.right
                    prev=curr.right
                    
                curr=curr.next
        return root
