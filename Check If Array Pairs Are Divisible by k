Problem Statement:

Given an array of integers arr of even length n and an integer k.
We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.
Return True If you can find a way to do that or False otherwise.

Example 1:
Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
Output: true
Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).

Example 2:
Input: arr = [1,2,3,4,5,6], k = 7
Output: true
Explanation: Pairs are (1,6),(2,5) and(3,4).

Example 3:
Input: arr = [1,2,3,4,5,6], k = 10
Output: false
Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.

Example 4:
Input: arr = [-10,10], k = 2
Output: true

Example 5:
Input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3
Output: true


Solution:
class Solution:
    def canArrange(self, arr: List[int], k: int) -> bool:
        """
        ###### TLE O(N^2);O(N)
        arr.sort()
        if len(arr)==2:
            return arr[0]%k==0 and arr[1]%k==0
        visited=set()
        cnt=0
        for i in range(len(arr)):
            if i in visited:
                continue
            for j in range(len(arr)-1,i,-1):
                if j in visited:
                    continue
                if (arr[i]+arr[j])%k==0:
                    # print(arr[i],arr[j])
                    cnt+=1
                    visited.add(i)
                    visited.add(j)
                    break
        return (len(arr)/2)==cnt
        """
        ##### O(N); O(N)
        mods=defaultdict(int)
        for each in arr:
            mods[each%k]+=1

     
        for each in arr:
            mod=each%k
            if mod==0 or 2*mod==k:
                if mods[mod]%2!=0:
                    return False
           
            else:
                if mods[mod]!= mods[k-mod]:
                    return False
        return True
