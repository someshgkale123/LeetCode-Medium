Problem Statement:

For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree.
Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, 
write a function to find all the MHTs and return a list of their root labels.

The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1 :
Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3 

Output: [1]

Example 2 :
Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5 

Output: [3, 4]


Solution:
class Solution:
    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:
        """
        ############# Using DFS (timed out)
        if not edges:
            return [0]
            
        def dfs(neighbours,visited):
            mx=0
            for i in neighbours:
                if i not in visited:
                    visited.add(i)
                    mx=max(mx,dfs(paths[i],visited))
            return mx+1
        paths=collections.defaultdict(list)
        for i,j in edges:
            paths[i]+=[j]
            paths[j]+=[i]
        res={}
        ans=float("inf")
        for i in paths.keys():
            visited={i}
            res[i]=dfs(paths[i],visited)
            ans=min(ans,res[i])
        return [i for i,j in res.items() if j==ans]
        """
        ########### Using Topological Method
        if not edges:
            return [0]
        paths=collections.defaultdict(list)
        for i,j in edges:
            paths[i]+=[j]
            paths[j]+=[i]
        leaves=[i for i,j in paths.items() if len(j)==1]
        new=[]
        while True:
            for leaf in leaves:
                for each in paths[leaf]:
                    paths[each].remove(leaf)
                    if len(paths[each])==1:
                        new.append(each)
            if new:
                leaves,new=new,[]
            else:
                break
        return leaves
