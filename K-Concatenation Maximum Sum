Problem Statement:

Given an integer array arr and an integer k, modify the array by repeating it k times.
For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].
Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.
As the answer can be very large, return the answer modulo 10^9 + 7.

Example 1:
Input: arr = [1,2], k = 3
Output: 9

Example 2:
Input: arr = [1,-2,1], k = 5
Output: 2

Example 3:
Input: arr = [-1,-2], k = 7
Output: 0



Solution:
class Solution:
    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:
        
        ######## O(k*n);O(n) using Kadane's algorithm TLE
        
        """
        visited=set()
        mx=0
        prev=0
        for i in range(k):
            if (prev,mx) in visited:
                continue
            dp=[0]*len(arr)
            for j in range(len(arr)):
                if j==0:
                    dp[j]=max(prev+arr[j],arr[j])
                else:
                    dp[j]=max(dp[j-1]+arr[j],arr[j])
                
                mx=max(dp[j],mx)
                
            visited.add((prev,mx))
            prev=dp[-1]
            
        return mx%((10**9)+7)
        """
        
        ######### O(N);O(1) using Kadane's algorithm
        mx=0
        end=0
        sm=sum(arr)
        
        # get maximum sum for two concatenated arr
        for i in range(2):
            
            # set prev value to 0
            prev=0
            for j in range(len(arr)):
                
                # if on 1st index, get max(end value of k-1 arr + current value , current value)  
                if j==0:
                    prev=max(end+arr[j],arr[j])
                
                # get max(prev value + current value , current value)
                else:
                    prev=max(prev+arr[j],arr[j])
                
                # keep track of max value on each index
                mx=max(mx,prev)
                
            # update end value of kth arr
            end=prev
            
        # if sum of arr is negative, return mx as concatenation of two arr is the max
        if sm<0:
            return mx
        else:
            
            # else, add remaining sum of k-2 concatenations to max value
            return (mx+(k-2)*sm)%((10**9)+7)
