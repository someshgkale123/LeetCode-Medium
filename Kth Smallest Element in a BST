Problem Statement:

Given the root of a binary search tree, and an integer k, return the kth (1-indexed) smallest element in the tree.

Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3


Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?


SOlution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        
        ####### bfs
        stack=[]
        while True:
            while root:
                stack.append(root)
                root=root.left
            value=stack.pop()
            k-=1
            if not k:
                return value.val
            root=value.right
            
       ####### Follow up
       build structure similar to LRU cache, where doubly linked list is generated and insertion in the doubly linked list is O(Height of tree) 
       and getting the kth smallest element is O(K)
