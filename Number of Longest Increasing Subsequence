Problem Statement:
 
Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].

Example 2:
Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.



Solution:
class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> int:
        """
        value=0
        cnt=0
        dp=[[0 for column in range(len(nums))] for row in range(len(nums))] 
        for i in range(len(dp)):
            for j in range(len(dp[0])):
                if nums[i]==nums[j]:
                    dp[i][j]=1
                elif nums[i]<nums[j]:
                    dp[i][j]=1+dp[i-1][j-1]
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])
                if dp[i][j]>value:
                    value=dp[i][j]
                    cnt=1
                elif dp[i][j]==value:
                    
                    
        print(value,cnt)
        """
        if len(nums)<=1:
            return len(nums)
    
        mxlen=[1]*len(nums)
        mxlencnt=[1]*len(nums)
        for j in range(1,len(nums)):
            for i in range(j):
                if nums[i]<nums[j]:
                    if mxlen[i]>=mxlen[j]:
                        mxlen[j]=mxlen[i]+1
                        mxlencnt[j]=mxlencnt[i]
                    elif mxlen[i]+1==mxlen[j]:
                        mxlencnt[j]+=mxlencnt[i]
        
        mx=max(mxlen)
        res=0
        for i,j in enumerate(mxlen):
            if j==mx:
                res+=mxlencnt[i]
        return res
