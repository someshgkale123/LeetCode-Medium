Problem Statement:


Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).
The replacement must be in place and use only constant extra memory.

Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]

Example 4:
Input: nums = [1]
Output: [1]


SOlution:
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        ######## O(N);O(1)
        
        def reverse(start,end):
             while start<end:
                nums[start],nums[end]=nums[end],nums[start]
                start+=1
                end-=1
        
        # look for index where nums[index-1]<nums[index] from right to left
        left=len(nums)-1
        for each in range(len(nums)-1,0,-1):
            if nums[each-1]>=nums[each]:
                left-=1
            else:
                break
        
        # if reached index 0 i.e whole nums is strictly decreasing, so reverse it
        if left==0:
            reverse(0,len(nums)-1)
            return nums
        
        # set left index and look from number viz. greater than left index from right to left
        left-=1
        right=len(nums)-1
        while left<right and nums[left]>=nums[right]:
            right-=1
        
        # swap the elements, as the next combination will be that element because previous element has exhausted the picks
        nums[left],nums[right]=nums[right],nums[left]
        
        # reverse the remaining elements
        reverse(left+1,len(nums)-1)
    
        return nums
