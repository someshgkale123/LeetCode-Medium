Problem Statement:

Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.
Return the maximum possible length of s.

Example 1:
Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All possible concatenations are "","un","iq","ue","uniq" and "ique".
Maximum length is 4.

Example 2:
Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible solutions are "chaers" and "acters".

Example 3:
Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26



Solution:
class Solution:
    def maxLength(self, arr: List[str]) -> int:
        ######### O(mn);O(mn+n)
        self.mx=0
        # hasmap for unique strings in arr
        unique={}
        for i in arr:
            if len(set(i))==len(i):
                unique[i]=len(i)
                # keeping track of maximum string length from arr
                self.mx=max(self.mx,len(i))
        
        def concat(n,index,temp,cnt):
            # at every recursive call get maximum between mx and current concatination
            self.mx=max(self.mx,cnt)
            # If hit the last index, return
            if index==n:
                return
            # Iterate from index onwards
            for i in range(index,n):
                # if the current string is not unique pick another
                if arr[i] not in unique:
                    continue
                # check if all elements are unique between prev and curr string
                flag=False
                for each in arr[i]:
                    if each in temp:
                        flag=True
                        break
                
                # if all elements are unique recursive and concat the current with prev and increment count
                if not flag:
                    concat(n,i+1,temp+arr[i],cnt+unique[arr[i]])
                    
        concat(len(arr),0,"",0)
        return self.mx
