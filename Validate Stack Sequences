Problem Statement:

Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a 
sequence of push and pop operations on an initially empty stack.

Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

Example 2:
Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.


Solution:
class Solution:
    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        """firsthalf,secondhalf=[],[]
        if not pushed or not popped:
            return True
        index=pushed.index(popped[0])+1
        firsthalf=pushed[:index]
        secondhalf=pushed[index:]
        for i in popped:
            if len(firsthalf)>0 and i==firsthalf[-1]:
                firsthalf.pop()
                #elif i==firsthalf[0]:
                 #   firsthalf.pop(0)

            elif len(secondhalf)>0:
                if i==secondhalf[0]:
                    secondhalf.pop(0)
                elif i==secondhalf[-1]:
                    secondhalf.pop()
        if not firsthalf and not secondhalf:
            return True
        return False
           """
        
        if not pushed or not popped:
            return True
        temp=[pushed[0]]
        i=1
        while i<len(pushed):
            while temp and temp[-1]==popped[0]:
                temp.pop()
                popped.pop(0)
                continue
            else:
                temp.append(pushed[i])
                i+=1
        """
        while temp and temp[-1]==popped[0]:
            temp.pop()
            popped.pop(0)
        """
        print(temp)
        print(popped)
        return temp==popped[::-1]
            
