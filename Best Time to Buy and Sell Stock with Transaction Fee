Problem Statement:

Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.
You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)

Return the maximum profit you can make.

Example 1:
Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
Buying at prices[0] = 1
Selling at prices[3] = 8
Buying at prices[4] = 4
Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.



Solution:
class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        
        """
        ###### Using recursion + memoization 
        dict={}
        def getcomb(prev,cnt):
            if prev-1 in dict:
                dict[prev-1]=max(cnt,dict[prev-1])
            else:
                dict[prev-1]=cnt
            if prev>=len(prices):
                return
            for each in range(prev+1,len(prices)):
                if prices[prev]<=prices[each]:
                    if prev-1 in dict and dict[prev-1]>cnt:
                        continue
                    getcomb(each+1,cnt+(prices[each]-prices[prev]-fee))
        dict={}  
        for each in range(len(prices)):
            getcomb(each,0)
        return max(dict.values())
           
        #print(dict)
        """
        ###### Using dynamic programming O(N); O(1)
        profit=0
        inhand=-prices[0]
        for i in range(1,len(prices)):
            profit=max(profit,inhand+prices[i]-fee)
            inhand=max(inhand,profit-prices[i])
        return profit
            
