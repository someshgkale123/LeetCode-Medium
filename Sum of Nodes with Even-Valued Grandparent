Problem Statement:
 
Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)
If there are no nodes with an even-valued grandparent, return 0.

Example 1:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.
 


Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumEvenGrandparent(self, root: TreeNode) -> int:
       
        """
        ####### 1st approach recursive
        self.sm=0
        def calsum(root):
            if not root:
                return 
            if root.val%2==0:
                if root.left and root.left.left:
                    self.sm+=root.left.left.val
                if root.left and  root.left.right:
                    self.sm+=root.left.right.val
                if root.right and root.right.left:
                    self.sm+=root.right.left.val
                if root.right and root.right.right:
                    self.sm+=root.right.right.val
            
            #print(self.sm)
            calsum(root.left)
            calsum(root.right)
            
        calsum(root)
        return self.sm
        """
        """
        ############# Using Iterative approach [Time - O(n), Space - O(h)]
        res=0
        stack=[[root,None,None]]
        while stack:
            node,parent,grandparent=stack.pop(0)
            if grandparent and grandparent.val%2==0:
                res+=node.val
            if node.left:
                stack.append([node.left,node,parent])
            if node.right:
                stack.append([node.right,node,parent])
        return res
        """
        ############### Using Recurisve approach [Time - O(n), Space - O(h)]
        self.res=0
        def checkgrandparent(root,parent,grandparent):
            if not root:
                return
            if grandparent and grandparent.val%2==0:
                self.res+=root.val
            if root.left:
                checkgrandparent(root.left,root,parent)
            if root.right:
                checkgrandparent(root.right,root,parent)
        checkgrandparent(root,None,None)
        return self.res
