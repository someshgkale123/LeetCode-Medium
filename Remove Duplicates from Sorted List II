Problem Statement:

Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Return the linked list sorted as well.

Example 1:
Input: 1->2->3->3->4->4->5
Output: 1->2->5

Example 2:
Input: 1->1->1->2->3
Output: 2->3


Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        ########## O(n), O(1)
        update=ListNode(0)
        prev=update
        prev.next=head
        curr=head
        while curr and curr.next:
            nxt=curr.next
            if curr.val!=nxt.val:
                prev=curr
                curr=nxt
                continue
            while nxt and nxt.val==curr.val:
                nxt=nxt.next
            prev.next=nxt
            curr=nxt
        return update.next
            
        
        
