Problem Statement:

Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network 
connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. 
You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.



Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root: TreeNode) -> str:
        """Encodes a tree to a single string.
        """
        if not root:
            return
        string=str(root.val)+"#"
        stack=[root]
        while stack:
            node=stack.pop(0)
            if node.left:
                string+=str(node.left.val)+"#"
                stack.append(node.left)
            if node.right:
                string+=str(node.right.val)+"#"
                stack.append(node.right)
        
        return string

    def deserialize(self, data: str) -> TreeNode:
        """Decodes your encoded data to tree.
        """
        if not data:
            return
        data=data.split("#")[:-1]
        def construct(new,data):
            if not data:
                return
            new=TreeNode(int(data.pop(0)))
            left=[]
            right=[]
            for each in data:
                if int(each)<new.val:
                    left+=[each]
                else:
                    right+=[each]
            new.left=construct(new,left)
            new.right=construct(new,right)
            return new
        return construct(TreeNode(0),data)
# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
