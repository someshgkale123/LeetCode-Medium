Problem Statement:

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
Note: A leaf is a node with no children.

Example:
Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:
        res=[]
        path=[]
        self.mx=0
        def check(root):
            if not root:
                return None
            path.append(root.val)
            self.mx+=root.val
            if not root.left and not root.right:
                if self.mx == sum:
                    res.append(list(path))
            check(root.left)
            check(root.right)
            temp=path.pop()
            self.mx-=temp
        check(root)
        return(res)
