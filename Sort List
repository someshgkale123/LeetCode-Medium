Problem Statement:

Sort a linked list in O(n log n) time using constant space complexity.
Example 1:
Input: 4->2->1->3
Output: 1->2->3->4

Example 2:
Input: -1->5->3->4->0
Output: -1->0->3->4->5


Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    
    def sortList(self, head: ListNode) -> ListNode:
        ############ O(nlogn), O(n)
        def merge(left,right):
            new=ListNode(0)
            temp=new
            while left and right:
                if left.val<right.val:
                    temp.next=left
                    left=left.next
                else:
                    temp.next=right
                    right=right.next
                temp=temp.next
            temp.next=left or right
            if left:
                left=left.next
            else:
                right=right.next
            return new.next
        
        if not head or not head.next:
            return head
        
        prev=slow=fast=head
        
        while fast and fast.next:
            prev=slow
            slow=slow.next
            fast=fast.next.next
        prev.next=None
        
        lefthalf=self.sortList(head)
        righthalf=self.sortList(slow)
        
        return merge(lefthalf,righthalf)
    
        
