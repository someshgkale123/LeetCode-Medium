Problem Statement:

Return the root node of a binary search tree that matches the given preorder traversal.
(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, 
and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, 
then traverses node.left, then traverses node.right.)

Example 1:
Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]


Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:
        if preorder:
            root=TreeNode(preorder[0])
            left=[]
            right=[]
            for i in range(1,len(preorder)):
                if preorder[i]<root.val:
                    left.append(preorder[i])
                else:
                    right.append(preorder[i])
            root.left=self.bstFromPreorder(left)
            root.right=self.bstFromPreorder(right)
            return root
        else:
            return None
