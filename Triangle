Problem Statement:

Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.


Solution:
########## O(N*N),O(N)
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        prev=triangle[0]
        for i in range(1,len(triangle)):
            for each in range(len(triangle[i])):
                if each==0:
                    triangle[i][each]+=prev[0]
                elif each==len(prev):
                    triangle[i][each]+=prev[-1]
                else:
                    temp=float("inf")
                    temp=min(prev[each-1]+triangle[i][each],temp)
                    temp=min(prev[each]+triangle[i][each],temp)
                    triangle[i][each]=temp
            prev=triangle[i]
                
        #print(triangle)
        return min(prev)
