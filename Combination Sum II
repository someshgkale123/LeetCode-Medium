Problem Statement:

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
Each number in candidates may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]



Solution:
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        if not target:
            return [[]]
        candidates.sort()
        ans=[]
        def backtrack(temp,index,target):
            if target==0 and temp not in ans:
                ans.append(temp)
                return
            for each in range(index,len(candidates)):
                if temp and temp[-1]>candidates[each]:
                    continue
                if (target-candidates[each])<0:
                    break
                backtrack(temp+[candidates[each]],each+1,target-candidates[each])
                
        backtrack([],0,target)
        return(ans)
