Problem Statement:

Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.
Note:
Each of the array element will not exceed 100.
The array size will not exceed 200.

Example 1:
Input: [1, 5, 11, 5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
 
Example 2:
Input: [1, 2, 3, 5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.



SOlution:
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        ###### O(less than 2^n, as repeated work is removed with memoization); O(l*n) l = length of nums, n = depth of recursive function
        # total sum of all the elements in nums
        total=sum(nums)
        
        # if the total sum is not equally divided by 2, then return False
        if total%2!=0:
            return False
        
        # get partition sum
        subsetsum=total//2
        
        visited={}
        seen=[0]*len(nums)
        self.flag=False
        
        def checksum(index,curr,temp):
            # if (currsum and list of added elements) in visited, return
            if (curr,tuple(temp)) in visited:
                return
            
            # if curr sum is equal to the partition sum, set flag=True otherwise return
            if curr>=subsetsum:
                if curr==subsetsum:
                    self.flag=True
                return
            
            # for each elements on right side of curr element
            for i in range(index,len(nums)):
                
                # if element already visited, check another
                if seen[i]==1:
                    continue
                    
                # set as visited
                seen[i]=1
                
                # recursive call to next element and add the curr element to currsum
                checksum(i+1,curr+nums[i],temp+[nums[i]])
                
                # if subsetsum found i.e. flag is true, return 
                if self.flag:
                    return
                
                # unmark the element
                seen[i]=0
            
            # save this pattern to visited, inorder to ignore any duplicate calls to the function ahead
            visited[(curr,tuple(temp))]=1
                
              
        checksum(0,0,[])
        return self.flag
