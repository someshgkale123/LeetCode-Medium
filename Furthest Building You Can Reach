Problem Statement:

You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.
You start your journey from building 0 and move to the next building by possibly using bricks or ladders.
While moving from building i to building i+1 (0-indexed),
If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.
Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.

Example 1:
Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
Output: 4
Explanation: Starting at building 0, you can follow these steps:
- Go to building 1 without using ladders nor bricks since 4 >= 2.
- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.
- Go to building 3 without using ladders nor bricks since 7 >= 6.
- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.
It is impossible to go beyond building 4 because you do not have any more bricks or ladders.

Example 2:
Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
Output: 7

Example 3:
Input: heights = [14,3,19,3], bricks = 17, ladders = 0
Output: 3



Solution:
class Solution:
    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:
        
        """
        ####### TLE
        jumps=[]
        for i in range(len(heights)-1):
            if heights[i]<heights[i+1]:
                jumps.append((i,i+1,heights[i+1]-heights[i]))
        print(jumps)
        
       
        queue=[(jumps[0],bricks,ladders)]
        
        index=1
        mx=0
        while queue:
            
            # print(queue,index)
            for each in range(len(queue)):
                curr,b,l=queue.pop(0)
                x,y,diff=curr
                mx=max(mx,y)
                if index>=len(jumps):
                    if b>=diff or l:
                        return len(heights)-1
                    else:
                        return mx-1
                if b>=diff:
                    queue.append((jumps[index],b-diff,l))
                    
                if l:
                    queue.append((jumps[index],b,l-1))
                
            index+=1
            
        return mx-1
        """
        
        ######### O(N);O(N) using heap
        
        # initialize max heap
        usedbricks=([])
        
        for i in range(len(heights)-1):
            
            # check if jump required
            if heights[i]<heights[i+1]:
                diff=heights[i+1]-heights[i]
                
                # insert the number of bricks required to reach the next building into the heap
                heappush(usedbricks,-diff)
                
                # use the bricks in hand to reach the next building
                bricks-=diff
                
                # if more bricks are required than the bricks in hand
                if bricks<0:
                    
                    # look for ladders, if ladder is available pick the previously most used bricks spot and retain that bricks and use ladder instead 
                    if ladders:
                        ladders-=1
                        bricks+=-heappop(usedbricks)
                    
                    # else stop jumping and return the current building index
                    else:
                        return i
                
        # reached the last building
        return len(heights)-1
                    
                    
                    
