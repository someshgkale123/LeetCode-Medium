Problem Statement:

Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.
Return the smallest level X such that the sum of all the values of nodes at level X is maximal.

Example 1:
Input: [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.



Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxLevelSum(self, root: TreeNode) -> int:
        res=[root]
        dict=collections.OrderedDict()
        cnt=1
        while res:
            li=[]
            summ=0
            for i in res:
                summ+=i.val
                if i.left:
                    li.append(i.left)
                if i.right:
                    li.append(i.right)
            dict[cnt]=summ
            cnt+=1
            if li:
                res=li
            else:
                break
        
        return(max(dict,key=dict.get))
