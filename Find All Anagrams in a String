Problem Statement:

Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.
The order of output does not matter.

Example 1:
Input:
s: "cbaebabacd" p: "abc"
Output:
[0, 6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:
Input:
s: "abab" p: "ab"
Output:
[0, 1, 2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


Solution:
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        """
        ################### Slower Run-time
        check=collections.Counter(p)
        dict={}
        li=[]
        for i in range(0,len(s)-len(p)+1): 
            temp=s[i:i+len(p)]
            if temp in dict:
                li+=[i]
            elif collections.Counter(temp)==check:
                li+=[i]
                dict[temp]=i
                
        return li
        #return [i for i,j in dict.items() if j==check]
        """
        ################## Faster Run-time
        li=[]
        verify=collections.Counter(p)
        for i in range(0,len(s)-len(p)+1):
            if i==0:
                newseen=collections.Counter(s[:len(p)])
            else: 
                curr=s[i-1]
                newseen[curr]-=1
                if newseen[curr]==0:
                    newseen.pop(curr)
                nextcurr=s[len(p)+i-1]
                newseen[nextcurr]+=1
            if newseen==verify:
                li.append(i)
        return li
