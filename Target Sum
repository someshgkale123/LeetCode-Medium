Problem Statement:

You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.
Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.


Solution:
class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        """
        ###### Using backtrack and getting all possible combinations, Time limit exceeds O(2^n);O(n)
        self.cnt=0
        def getcomb(index,sm):
            if index>=len(nums):
                if sm==S:
                    self.cnt+=1
                return
            for i in range(index,len(nums)):
                getcomb(i+1,sm+nums[i])
                getcomb(i+1,sm-nums[i])
        getcomb(0,0,"")
        return self.cnt
        """
        ###### Using memoization on previous solution, removing duplicate calls to the function
        ###### time: O(less than 2^n as duplicate calls are ignored); space: O(l*n) l=length of nums, n= max depth of recursion
        visited={}
        def getcomb(curr,nums):
            # print(visited)
            # check if (currsum,remaining numbers) pattern present in visited
            if (curr,tuple(nums)) in visited:
                return visited[(curr,tuple(nums))]
            
            # if all elements are used from nums, check if currsum equals to S or not
            if not nums:
                if curr==S:
                    return 1
                return 0
            
            # add the possible combinations retrieved from +1,-1 and store it in visited
            visited[(curr,tuple(nums))]=getcomb(curr+nums[0],nums[1:])+getcomb(curr-nums[0],nums[1:])
            return visited[(curr,tuple(nums))]
        
        return getcomb(0,nums)
