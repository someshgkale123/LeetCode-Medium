Problem Statement:

You are given an integer array nums and an integer k.
In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.
Return the maximum number of operations you can perform on the array.

Example 1:
Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.

Example 2:
Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.


Solution:
class Solution:
    def maxOperations(self, nums: List[int], k: int) -> int:
        
        ###### O(N); O(N)
        
        # initialize visited hashmap which stores number and its frequency
        visited={}
        cnt=0
        for each in nums:
            
            # get diff of current element and target
            diff=k-each
            
            # if diff is in visited, i.e. we previously visited a number which sums up with current element to form target number
            if diff in visited:
                
                # increment cnt viz. found a pair and decrement the used number from visited 
                cnt+=1
                visited[diff]-=1
                if visited[diff]==0:
                    del visited[diff]
            else:
                visited[each]=visited.get(each,0)+1
                
        return cnt
    
