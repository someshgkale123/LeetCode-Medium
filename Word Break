Problem Statement:

Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.
Note:
The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.

Example 1:
Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:
Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.

Example 3:
Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false


Solution:
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        
        """
        self.isseg=True
        visited={}
        wordDict=set(wordDict)
        def check(strr):
            if not strr:
                return
            if strr in wordDict or strr in visited:
                self.isseg&=True
                return
            
            temp=""
            for i in range(len(strr)):
                temp+=strr[i]
                if temp in wordDict:
                    self.isseg&=True
                    visited[temp]=1
                    check(strr[i+1:])
                    if self.isseg:
                        return  
                    self.isseg=True
                    
            if temp and temp not in wordDict:
                self.isseg&=False
                return
                
        check(s)
        return self.isseg
        """
        ###### O(n^2),O(n)
        visited={}
        def check(strr):
            if not strr:
                return True
            elif strr in visited:
                return visited[strr]
            
            for i in wordDict:
                temp=strr[:len(i)]
                ans=False
                if temp==i:
                    visited[temp]=True
                    ans=check(strr[len(i):])
                if ans:
                    return True
            visited[strr]=False
            return False
        return check(s)
