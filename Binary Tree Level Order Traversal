Problem Statement:

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]



Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        li=[root]
        res=[]
        while li:
            temp=[]
            res.append([i.val for i in li])
            for i in li:
                if i.left:
                    temp.append(i.left)
                    
                if i.right:
                    temp.append(i.right)
            if temp:
                li=temp
            else:
                break
        return res
