Problem Statement:

On a 2-dimensional grid, there are 4 types of squares:
1 represents the starting square.  There is exactly one starting square.
2 represents the ending square.  There is exactly one ending square.
0 represents empty squares we can walk over.
-1 represents obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 
Example 1:
Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)

Example 2:
Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

Example 3:
Input: [[0,1],[2,0]]
Output: 0
Explanation: 
There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.
 
 
SOlution:
class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        
        def dfs(i,j,cnt):
            
            # if outofbound or visited or -1(obstacle), return
            if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j]==-1 or grid[i][j]==-2:
                return
            
            # if found 2, check if all zeros are visited i.e. cnt==0 or not and 1 to the paths
            if grid[i][j]==2:
                if cnt==0:
                    self.paths+=1
                return
            
            # mark cell as visited
            grid[i][j]=-2
            dfs(i+1,j,cnt-1)
            dfs(i,j+1,cnt-1)
            dfs(i-1,j,cnt-1)
            dfs(i,j-1,cnt-1)
            # retain cell value and backtrack
            grid[i][j]=0
            
            
        cnt=1
        row,col=0,0
        # count the number of zeros in the grid and position for 1
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    row=i
                    col=j
                if grid[i][j]==0:
                    cnt+=1
        
        self.paths=0
        # traverse 1's neighbor
        dfs(row,col,cnt)

        return self.paths
