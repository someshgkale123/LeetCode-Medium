Problem Statement:

You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.
Define a pair (u,v) which consists of one element from the first array and one element from the second array.
Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

Example 1:
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]] 
Explanation: The first 3 pairs are returned from the sequence: 
             [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

Example 2:
Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [1,1],[1,1]
Explanation: The first 2 pairs are returned from the sequence: 
             [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:
Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [1,3],[2,3]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]



Solution:
class Solution:
    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
        if not nums1 or not nums2:
            return []
        
        heap=[(nums1[0]+nums2[0],0,0)]
        
        """
        ####### O(nmlognm) ; O(nm)
        for i in range(len(nums1)):
            for j in range(len(nums2)):
                heappush(heap,(nums1[i]+nums2[j],[nums1[i],nums2[j]]))
        
        ans=[]
        while k:
            ans.append(heappop(heap)[1])
            k-=1
            if not heap:
                break
        return ans
        """
        
        ####### O(KlogK); O(nm)
        ans=[]
        seen=set()
        
        while k:
            # heap is empty, return ans
            if not heap:
                break
                
            # pop smallest sum value and its index
            value,i,j=heappop(heap)
            
            # if this index already visited, search another
            if (i,j) in seen:
                continue
            
            seen.add((i,j))
            
            # append kth smallest sum in ans
            ans.append([nums1[i],nums2[j]])
            
            # if i does not reached end, push next element from nums1 and current element from nums2
            if i+1<len(nums1):
                heappush(heap,(nums1[i+1]+nums2[j],i+1,j))
                
            # if j does not reached end, push next element from nums2 and current element from nums1
            if j+1<len(nums2):
                heappush(heap,(nums1[i]+nums2[j+1],i,j+1))
            
            # decrement k
            k-=1
        return ans
        
