Problem Statement:

Return any binary tree that matches the given preorder and postorder traversals.
Values in the traversals pre and post are distinct positive integers.

Example 1:
Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]

Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def constructFromPrePost(self, pre: List[int], post: List[int]) -> TreeNode:
        if not pre:
            return None
        
        root=TreeNode(pre[0])
        if len(pre)==1:
            return root
        index=post.index(pre[1])+1
        root.left=self.constructFromPrePost(pre[1:index+1],post[:index])
        root.right=self.constructFromPrePost(pre[index+1:],post[index:-1])
        return root
        
