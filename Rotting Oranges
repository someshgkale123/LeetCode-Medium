Problem Statement:

In a given grid, each cell can have one of three values:
the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.
Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 
Example 1:
Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.



SOlution:
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        visited={}
        
        def bfs(neighbors):
            while neighbors:
                temp=[]
                #print(neighbors)
                for neighbor in neighbors:
                    x,y,value=neighbor
                    if x<0 or x>=len(grid) or y<0 or y>=len(grid[0]) or grid[x][y]==0:
                        continue
                    if (x,y) in visited and visited[(x,y)]<value:
                        continue
                    if grid[x][y]==1 or ((x,y) in visited and grid[x][y]==2):
                        grid[x][y]=2
                        temp.append((x+1,y,value+1))
                        temp.append((x,y+1,value+1))
                        temp.append((x-1,y,value+1))
                        temp.append((x,y-1,value+1))
                        visited[(x,y)]=value
                   
                #print(visited)
                if temp:
                    #print(temp)
                    neighbors=temp
                else:
                    return
        
        checkfresh=set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if (i,j) not in visited and grid[i][j]==2:
                    li=[(i+1,j,1),(i,j+1,1),(i-1,j,1),(i,j-1,1)]
                    bfs(li)
                    
                if grid[i][j]==1:
                    checkfresh.add((i,j))
        
        for each in checkfresh:
            if each not in visited:
                return -1
          
        return 0 if not visited else max(visited.values())
                    
        
 
