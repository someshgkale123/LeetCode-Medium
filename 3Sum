Problem Statement:

Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
The solution set must not contain duplicate triplets.

Example:
Given array nums = [-1, 0, 1, 2, -1, -4],
A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]




Solution:
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        """
        O(n^2), O(n) works for non-duplicate array
        dict={}
        st=[]
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                print(i,j)
                temp=nums[i]+nums[j]
                if nums[i] in dict:
                    print(dict[nums[i]]+[nums[i]])
                else:
                    dict[-temp]=[nums[i],nums[j]]
        print(dict)
        return(st)
        """  
        ######## O(n^2),O(n) 
        nums.sort()
        ans=[]
        for i in range(len(nums)-2):
            if i>0 and nums[i]==nums[i-1]:
                continue
            target=-nums[i]
            left=i+1
            right=len(nums)-1
            while left<right:
                if (nums[left]+nums[right])<target:
                    left+=1
                elif (nums[left]+nums[right])>target:
                    right-=1
                else:
                    ans.append((nums[i],nums[left],nums[right]))
                    left+=1
                    right-=1
        return(set(ans))
