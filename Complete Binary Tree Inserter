Problem Statement:

A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.
Write a data structure CBTInserter that is initialized with a complete binary tree and supports the following operations:
CBTInserter(TreeNode root) initializes the data structure on a given tree with head node root;
CBTInserter.insert(int v) will insert a TreeNode into the tree with value node.val = v so that the tree remains complete, and returns the value of the parent of the inserted TreeNode;
CBTInserter.get_root() will return the head node of the tree.
 

Example 1:
Input: inputs = ["CBTInserter","insert","get_root"], inputs = [[[1]],[2],[]]
Output: [null,1,[1,2]]

Example 2:
Input: inputs = ["CBTInserter","insert","insert","get_root"], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]
Output: [null,3,4,[1,2,3,4,5,6,7,8]]


Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class CBTInserter:

    def __init__(self, root: TreeNode):
        self.root=root
        self.priorities=deque([])
        values=[root]
        while values:
            for each in range(len(values)):
                temp=values.pop(0)
                if temp.left:
                    values.append(temp.left)

                if temp.right:
                    values.append(temp.right)
                    
                if not temp.left or not temp.right:
                    self.priorities.append(temp)
        
    
    def insert(self, v: int) -> int:
        
        temp=self.priorities[0]
        if not temp.left:
            temp.left=TreeNode(v)
            self.priorities.append(temp.left)
        else:
            temp.right=TreeNode(v)
            self.priorities.append(temp.right)
            self.priorities.popleft()
        return temp.val

    def get_root(self) -> TreeNode:
        return self.root


# Your CBTInserter object will be instantiated and called as such:
# obj = CBTInserter(root)
# param_1 = obj.insert(v)
# param_2 = obj.get_root()
