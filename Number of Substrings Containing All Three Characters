Problem Statement:
Given a string s consisting only of characters a, b and c.
Return the number of substrings containing at least one occurrence of all these characters a, b and c.

Example 1:
Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 

Example 2:
Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 

Example 3:
Input: s = "abc"
Output: 1
 

Solution:
class Solution:
    def numberOfSubstrings(self, s: str) -> int:
        ######### O(N),O(1)
        st=0
        dict={}
        prev=0
        cnt=0
        for i in range(len(s)):
            if s[i] not in dict:
                st+=1
            dict[s[i]]=dict.get(s[i],0)+1
            # print(dict)
            while st==3:
                # print(i,dict)
                cnt+=len(s)-i
                dict[s[prev]]-=1
                if dict[s[prev]]==0:
                    del dict[s[prev]]
                    st-=1
                prev+=1
                
        return cnt
