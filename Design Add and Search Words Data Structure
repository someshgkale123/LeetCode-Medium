Problem Statememt:

Design a data structure that supports adding new words and finding if a string matches any previously added string.
Implement the WordDictionary class:
WordDictionary() Initializes the object.
void addWord(word) Adds word to the data structure, it can be matched later.
bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.
 

Example:
Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]

Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True

 

Solution:
class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dict={}
    
    
        
    def addWord(self, word: str) -> None:
        """
        Adds a word into the data structure.
        """
        current=self.dict
        for letter in word:
            current=current.setdefault(letter,{})
        current=current.setdefault("end")
        
        

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        """
        def bracktrack(branch,word):
            if not word:
                return "end" in branch
            
            if word[0]==".":
                for each in branch:
                    if each=="end":
                        continue
                    if bracktrack(branch[each],word[1:]):
                        return True
                return False
            
            elif word[0] in branch:
                return bracktrack(branch[word[0]],word[1:])
            else:
                return False 
        
       
        current=self.dict
        return bracktrack(current,word)
        

# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
