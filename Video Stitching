Problem Statement:
 
You are given a series of video clips from a sporting event that lasted T seconds.  These video clips can be overlapping with each other and have varied lengths.
Each video clip clips[i] is an interval: it starts at time clips[i][0] and ends at time clips[i][1].  We can cut these clips into segments freely: for example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].
Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event ([0, T]).  If the task is impossible, return -1.

Example 1:
Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
Output: 3
Explanation: 
We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
Then, we can reconstruct the sporting event as follows:
We cut [1,9] into segments [1,2] + [2,8] + [8,9].
Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].

Example 2:
Input: clips = [[0,1],[1,2]], T = 5
Output: -1
Explanation: 
We can't cover [0,5] with only [0,1] and [1,2].

Example 3:
Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9
Output: 3
Explanation: 
We can take clips [0,4], [4,7], and [6,9].

Example 4:
Input: clips = [[0,4],[2,8]], T = 5
Output: 2
Explanation: 
Notice you can have extra video after the event ends.
 
 
SOlution:
class Solution:
    def videoStitching(self, clips: List[List[int]], T: int) -> int:
        #### O(N*T);O(N)
        
        intervalstart={}
        # search for different intervalstart and select the interval viz. covering max length
        for i,j in clips:
            if i not in intervalstart:
                intervalstart[i]=(i,j)
            else:
                x,y=intervalstart[i]
                if j>y:
                    intervalstart[i]=(i,j)
                    
        # if the interval does not start from 0, return -1
        if 0 not in intervalstart:
            return -1
        
        visited={}
        self.mn=float("inf")
        def getintervals(start,end,length):
            
            # if the interval already visited, check if the interval length is less or not
            if (start,end) in visited and visited[(start,end)]<length:
                return 
            
            # if reached T, update min length and return
            if end>=T:
                self.mn=min(self.mn,length)
                return 
            
            # current interval
            x,y=intervalstart[start]
            
            # look for another interval which start from range(start,end)
            for each in range(x+1,y+1):
                
                # if no interval starting from each, search another
                if each not in intervalstart:
                    continue
                
                # next interval
                newx,newy=intervalstart[each]
                
                # if the interval end is greater than current interval, search for another interval
                if y>=newx and y>=newy:
                    continue
                getintervals(each,newy,length+1)
                
                # mark interval as visited
                visited[(newx,newy)]=length
                
        getintervals(0,intervalstart[0][1],1)
        return -1 if self.mn==float("inf") else self.mn
        
