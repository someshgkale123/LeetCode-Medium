Problem Statement:

Given a binary tree, determine if it is a valid binary search tree (BST).
Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true

Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.


Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        """
        li=[float("-inf")]
        flag=[]
        def check(root):
            if not root:
                return None
            check(root.left)
            if root.val>li[-1]:
                li.append(root.val)
                flag.append(True)
            else:
                flag.append(False)
            check(root.right)
        check(root)
        #print(li)
        temp=flag[1:]
        if not temp:
            return True
        return all(flag)
        """
        li=[]
        def check(root):
            if not root:
                return None
            check(root.left)
            li.append(root.val)
            check(root.right)
            return li
        newli=check(root)
        if not newli:
            return True
        for i in range(1,len(newli)):
            if not li[i]>li[i-1]:
                return False
        return True
