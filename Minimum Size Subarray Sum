Problem Statement:

Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. 
If there isn't one, return 0 instead.

Example: 
Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.


Solution:
class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        if len(nums)==0:
            return 0
        if s>sum(nums):
            return 0
        
        cnt=float("inf")
        summ=0
        i=0
        for j in range(len(nums)):
            summ+=nums[j]
            while summ>=s:
                cnt=min(cnt,j+1-i)
                summ-=nums[i]
                i+=1
        if cnt!=float("inf"):
            return cnt
        else:
            0
        
    
