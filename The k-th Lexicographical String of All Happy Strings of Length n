Problem Statement:

A happy string is a string that:
consists only of letters of the set ['a', 'b', 'c'].
s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.
Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.
Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

Example 1:
Input: n = 1, k = 3
Output: "c"
Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".

Example 2:
Input: n = 1, k = 4
Output: ""
Explanation: There are only 3 happy strings of length 1.

Example 3:
Input: n = 3, k = 9
Output: "cab"
Explanation: There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9th string = "cab"

Example 4:
Input: n = 2, k = 7
Output: ""

Example 5:
Input: n = 10, k = 100
Output: "abacbabacb"



Solution:
class Solution:
    def getHappyString(self, n: int, k: int) -> str:
        
        """
        #### checking every possibility
        li=[]
        available=["a","b","c"]
        def gethappystring(curr,temp):
            if len(temp)==n:
                li.append(temp)
                return
            for each in available:
                if each!=curr:
                    gethappystring(each,temp+[each])
        gethappystring("",[])
        if k>len(li):
            return ""
        return "".join(li[k-1])
        """
        
        """
        #### Using hashmap for picking adjacents characters
        li=[]
        available=["a","b","c"]
        noadj={" ":"abc","a":"bc","b":"ac","c":"ab"}
        
        def gethappystring(curr,temp):
            if len(temp)==n:
                li.append(temp)
                return
            for each in noadj[curr]:
                gethappystring(each,temp+[each])
        gethappystring(" ",[])
        if k>len(li):
            return ""
        return "".join(li[k-1])
        """
        
        ##### stop the search after we get the kth combination 
        ans=[""]
        noadj={" ":"abc","a":"bc","b":"ac","c":"ab"}
        self.flag=False
        self.cnt=0
        def gethappystring(curr,temp):
            if len(temp)==n:
                self.cnt+=1
                #print(temp,self.cnt)
                if self.cnt==k:
                    self.flag=True
                    ans[0]="".join(temp)
                return
            for each in noadj[curr]:
                if self.flag:
                    return
                gethappystring(each,temp+[each])
                
        gethappystring(" ",[])
        return ans[0]
 
