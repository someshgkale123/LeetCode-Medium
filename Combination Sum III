Problem Statement:

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:
All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]



Solution:
class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        ###### O(9^k),O(k)
        output=[]
        if n==0:
            return []
        def dfs(temp,index):
            sm=temp
            if sum(sm)==n and len(sm)==k:
                output.append(sm)
            elif len(sm)>k or sum(sm)>n:
                return
            for each in range(index,10):
                if temp and temp[-1]>each:
                    continue
                dfs(temp+[each],each+1)
        
        dfs([],1)
        return(output)
