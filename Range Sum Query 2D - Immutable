Problem Statement:

Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12



Solution:
class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
    ####### O(mn);O(mn)
        if len(matrix)==0 or len(matrix[0])==0:
            return 
        self.prefix=[[0 for i in range(len(matrix[0])+1)] for i in range(len(matrix)+1)]
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                self.prefix[i+1][j+1]=(matrix[i][j]+self.prefix[i+1][j]+self.prefix[i][j+1])-self.prefix[i][j]

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
    ####### O(1),O(1)
        temp=self.prefix[row2+1][col2+1]-self.prefix[row1][col2+1]-self.prefix[row2+1][col1]+self.prefix[row1][col1]
        # print(self.prefix[row2][col2],self.prefix[row1-1][col2],self.prefix[row2][col1-1])
       
        return temp

# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
