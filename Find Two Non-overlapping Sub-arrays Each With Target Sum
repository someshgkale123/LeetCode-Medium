Problem Statement:

Given an array of integers arr and an integer target.
You have to find two non-overlapping sub-arrays of arr each with sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the 
two sub-arrays is minimum.
Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.

Example 1:
Input: arr = [3,2,2,4,3], target = 3
Output: 2
Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.

Example 2:
Input: arr = [7,3,4,7], target = 7
Output: 2
Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.

Example 3:
Input: arr = [4,3,2,6,2,3,4], target = 6
Output: -1
Explanation: We have only one sub-array of sum = 6.

Example 4:
Input: arr = [5,5,4,4,5], target = 3
Output: -1
Explanation: We cannot find a sub-array of sum = 3.

Example 5:
Input: arr = [3,1,1,1,5,1,2,1], target = 3
Output: 3
Explanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.
 
 
Solution:
class Solution:
    def minSumOfLengths(self, arr: List[int], target: int) -> int:
        """
        ######### Sliding window and intervlas O(N*N);O(N)
        
        left=0
        summ=0
        intervals=defaultdict(int)
        for i in range(len(arr)):
            summ+=arr[i]
            while summ>target:
                summ-=arr[left]
                left+=1
            if summ==target:
                intervals[(left,i)]=i-left+1
        minn=float("inf")
        lstinter=list(intervals.keys())
        #print(lstinter)
        for i in range(len(lstinter)):
            for j in range(len(lstinter)-1,i,-1):
                pi,pj=lstinter[i]
                ci,cj=lstinter[j]
                if pj<ci:
                    minn=min(minn,intervals[(pi,pj)]+intervals[(ci,cj)])
                else:
                    break
        return -1 if minn==float("inf") else minn
        """
        ########## Sliding window and memoization O(N);O(N)
        
        left=0
        summ=0
        minn=float(inf)
        minnbefore=[minn]*len(arr)
        for i in range(len(arr)):
            summ+=arr[i]
            while summ>target:
                summ-=arr[left]
                left+=1
            if summ==target:
                currlen=i-left+1
                minn=min(minn,minnbefore[left-1]+currlen)
                minnbefore[i]=min(minnbefore[i-1],currlen)
            else:
                minnbefore[i]=minnbefore[i-1]
            print(minnbefore,minn)
        if minn==float("inf"):
            return -1
        else:
            return minn
        
        """
        ########## Sliding window and stack O(NlogN);O(N)
        stack=[]
        # sub1,sub2=float(inf),float(inf)
        for each in intervals.keys():
            if not stack:
                stack.append(each)
            else:
                pi,pj=stack[-1]
                ci,cj=each
                if pj>=ci:
                    if intervals[(pi,pj)]>intervals[each]:
                        stack.pop()
                        stack.append(each)
                else:
                    stack.append(each)
        print(intervals)
        print(stack)
        stack.sort(key=lambda x:intervals[x])
        if len(stack)<=1:
            return -1
        else:
            return intervals[stack[0]]+intervals[stack[1]]
        """
