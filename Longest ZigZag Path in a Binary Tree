Problem Statement:
 
Given a binary tree root, a ZigZag path for a binary tree is defined as follow:
Choose any node in the binary tree and a direction (right or left).
If the current direction is right then move to the right child of the current node otherwise move to the left child.
Change the direction from right to left or right to left.
Repeat the second and third step until you can't move in the tree.
Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.

Example 1:
Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]
Output: 3
Explanation: Longest ZigZag path in blue nodes (right -> left -> right).

Example 2:
Input: root = [1,1,1,null,1,null,null,1,1,null,1]
Output: 4
Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).

Example 3:
Input: root = [1]
Output: 0



Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestZigZag(self, root: TreeNode) -> int:
        ####### O(N);O(N)
        self.mx=0
        def backtrack(root,curr,temp):    
            # if root is null return
            if not root:
                return
            
            #keep track of max count of zigzag path
            self.mx=max(self.mx,temp)
            
            # if prev node took left turn, look for right turn
            if curr=="left":
                backtrack(root.right,"right",temp+1)
                backtrack(root.left,"left",1)
                
             # if prev node took right turn, look for left turn
            else:
                backtrack(root.left,"left",temp+1)
                backtrack(root.right,"right",1)
        
        # traverse both left path possible and right path possible
        backtrack(root,"left",0)
        backtrack(root,"right",0)
        
        # return max
        return self.mx
