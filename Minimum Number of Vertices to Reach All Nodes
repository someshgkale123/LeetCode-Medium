Problem Statement:

Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.
Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.
Notice that you can return the vertices in any order.

Example 1:
Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
Output: [0,3]
Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].

Example 2:
Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
Output: [0,2,3]
Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.

Solution:
class Solution:
    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:
        """
        #### Initial approach using bfs
        graph={}
        for i,j in edges:
            graph[i]=graph.get(i,[])+[j]
        print(graph)
        st=deque([i for i in graph.keys()])
        li=[]
        while st:
            start=st.popleft()
            li.append(start)
            queue=deque([start])
            while queue:
                for i in range(len(queue)):
                    node=queue.popleft()
                    if node in graph:
                        for each in graph[node]:
                            if each in st:
                                st.remove(each)
                            queue.append(each)
        return(li)
        """
        ####### Using bfs indegree O(E+V);O(E+V)
        graph={}
        indegree={}
        for i,j in edges:
            graph[i]=graph.get(i,[])+[j]
            indegree[j]=indegree.get(j,0)+1
        
        queue=deque([])
        zeros=set()
        ans=set()
        for i in range(n):
            if i not in indegree:
                queue.append(i)
                zeros.add(i)
        while queue:
            if not indegree:
                return ans
            node=queue.popleft()
            if node not in graph:
                continue
            for i in graph[node]:
                indegree[i]-=1
                if indegree[i]==0:
                    del indegree[i]
                    queue.append(i)
            if node in zeros:
                ans.add(node)
        
        
        
                
                
            
