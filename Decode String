Problem Statement:

Given an encoded string, return its decoded string.
The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.
Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 
2[4].

 
Example 1:
Input: s = "3[a]2[bc]"
Output: "aaabcbc"

Example 2:
Input: s = "3[a2[c]]"
Output: "accaccacc"

Example 3:
Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"

Example 4:
Input: s = "abc3[cd]xyz"
Output: "abccdcdcdxyz"



SOlution:
class Solution:
    def decodeString(self, s: str) -> str:
        values=[]
        tempstr=[]
        ans=""
        for i in s:
            if i.isdigit():
                if len(values)!=len(tempstr):
                    values[-1]+=i
                else:
                    values.append(i)
            elif i=="[":
                tempstr.append("")
            elif i=="]":
                val=int(values.pop())
                temp=tempstr.pop()
                newstr=temp*val
                if tempstr:
                    tempstr[-1]+=newstr
                else:
                    ans+=newstr
            else:
                if tempstr:
                    tempstr[-1]+=i
                else:
                    ans+=i
        return (ans)
                
        ########## Recursive O(max(K)*n); O(n)
        """
        self.n=len(s)
        def recurse(indx,s):
        
            if not s:
                return ""
            if len(s)==1 and s.isalpha():
                return s
            # print(s)
            chars=""
            while indx<len(s) and s[indx].isalpha():
                chars+=s[indx]
                indx+=1
                        
            digit=""
            while indx<len(s) and s[indx].isdigit():
                digit+=s[indx]
                indx+=1
            if digit:
                temp=None
                id=indx
                while temp!=0:
                    if s[id]=="[":
                        if not temp:
                            temp=1
                        else:
                            temp+=1
                    elif s[id]=="]":
                        temp-=1
                    id+=1
                return chars+(recurse(0,s[indx+1:id-1])*int(digit))+recurse(0,s[id:])
            else:
                return chars
        
        return recurse(0,s)
        """
        ########## Iterative using Two stacks O(N); O(k(number of open bracket pairs)) 
        
        chars=[""]
        digits=[""]
        indx=0
        while indx<len(s):
            if s[indx].isdigit():
                digit=""
                while s[indx].isdigit():
                    digit+=s[indx]
                    indx+=1
                digits.append(int(digit))
                chars.append("")
            elif s[indx]=="]":
                digit=digits.pop()
                string=chars.pop()[1:]
                chars[-1]+=string*digit
                indx+=1
            else:
                chars[-1]+=s[indx]
                indx+=1
        
        return chars[0]
