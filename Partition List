Problem Statement:
 
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
Example:
Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5


Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def partition(self, head: ListNode, x: int) -> ListNode:
        
        low=head
        high=head
        parition=ListNode(0)
        new=parition
        while low:
            if low.val<x:
                new.next=ListNode(low.val)
                new=new.next
            low=low.next
        
        while high:
            if high.val>=x:
                new.next=ListNode(high.val)
                new=new.next
            high=high.next
        return parition.next
