Problem Statement:

Given a string, find the length of the longest substring without repeating characters.
Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Example 2:
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             

Solution:

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        ###### slower search in string
        stri=""
        maxx=0
        for i in s:
            if i not in stri:
                stri+=i
            else:
                stri=stri[stri.index(i)+1:]+i
            if len(stri)>maxx:
                maxx=len(stri)
        return(maxx)
        
        ###### faster search using hashmap
        ### O(N);O(N)
        left=0
        previous={}
        mx=0
        for each in range(len(s)):
            if s[each] not in previous:
                previous[s[each]]=each
            else:
                mx=max(mx,len(previous))
                while s[each] in previous:
                    del previous[s[left]]
                    left+=1
                previous[s[each]]=each
        mx=max(mx,len(previous))
        return mx
