Problem Statement:

You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.

For example, if nums = [6,1,7,4,1]:
Choosing to remove index 1 results in nums = [6,7,4,1].
Choosing to remove index 2 results in nums = [6,1,4,1].
Choosing to remove index 4 results in nums = [6,1,7,4].
An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.
Return the number of indices that you could choose such that after the removal, nums is fair.

Example 1:
Input: nums = [2,1,6,4]
Output: 1
Explanation:
Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.
Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.
Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.
Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.
There is 1 index that you can remove to make nums fair.

Example 2:
Input: nums = [1,1,1]
Output: 3
Explanation: You can remove any index and the remaining array is fair.

Example 3:
Input: nums = [1,2,3]
Output: 0
Explanation: You cannot make a fair array after removing any index.
 
 
 
Solution:
class Solution:
    def waysToMakeFair(self, nums: List[int]) -> int:
        
        ############ O(N); O(1)
        
        # Using a swapping technique will help in adjusting the even and odd indices sum after removal of any index
        # make sure to keep track of previous even and odd sum till current index
        
        
        # get even, odd sum of total array
        even,odd=0,0
        for each in range(len(nums)):
            if each%2==0:
                even+=nums[each]
            else:
                odd+=nums[each]
        
        # initialize temp even and temp odd sum i.e previous even, odd sum from current index 
        cnt=0
        tempeven,tempodd=0,0
        for each in range(len(nums)):
            
            # if current index is even
            if each%2==0:
                
                # remove current index value from even and swap the values of even, odd and check if sum of temp and current even, odd is equal
                even-=nums[each]
                if tempeven+odd==tempodd+even:
                    cnt+=1
                
                # lastly add current index value to tempeven, as it's visited and now became previous even value
                tempeven+=nums[each]
            else:
                # remove current index value from odd and swap the values of even, odd and check if sum of temp and current even, odd is equal
                odd-=nums[each]
                if tempeven+odd==tempodd+even:
                    cnt+=1
                
                # lastly add current index value to tempodd, as it's visited and now became previous odd value
                tempodd+=nums[each]
                
        return cnt
