Problem Statement:

You are given a rows x cols matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.
Among all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (rows - 1, cols - 1), find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.
Return the maximum non-negative product modulo 109 + 7. If the maximum product is negative return -1.
Notice that the modulo is performed after getting the maximum product.

 
Example 1:
Input: grid = [[-1,-2,-3],
               [-2,-3,-3],
               [-3,-3,-2]]
Output: -1
Explanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.

Example 2:
Input: grid = [[1,-2,1],
               [1,-2,1],
               [3,-4,1]]
Output: 8
Explanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).

Example 3:
Input: grid = [[1, 3],
               [0,-4]]
Output: 0
Explanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).

Example 4:
Input: grid = [[ 1, 4,4,0],
               [-2, 0,0,1],
               [ 1,-1,1,1]]
Output: 2
Explanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).
 
Solution:
class Solution:
    def maxProductPath(self, grid: List[List[int]]) -> int:
        
        ############## O(N*N); O(N*N)
        
        # initialize dp with max,min number at each cell
        dp=[[[0] for each in range(len(grid[0]))] for each in range(len(grid))]
        
        # initialize border cells that depends on only left or upper cells
        dp[0][0]=[grid[0][0]]
        for each in range(1,len(dp[0])):
            dp[0][each][0]=dp[0][each-1][0]*grid[0][each]
        
        for each in range(1,len(dp)):
            dp[each][0][0]=dp[each-1][0][0]*grid[each][0]
        
        # Now compute max, min values for cells dependent on both upper and left cells
        for i in range(1,len(dp)):
            for j in range(1,len(dp[0])):
                mn=float("inf")
                mx=float("-inf")
                
                # if upper cell have both max and min values
                if len(dp[i-1][j])>1:
                    
                    # get minimum of both
                    mn=min(mn,grid[i][j]*dp[i-1][j][0])
                    mn=min(mn,grid[i][j]*dp[i-1][j][1])
                    
                    # get maximum of both
                    mx=max(mx,grid[i][j]*dp[i-1][j][0])
                    mx=max(mx,grid[i][j]*dp[i-1][j][1])
                else:
                    mn=min(mn,grid[i][j]*dp[i-1][j][0])
                    mx=max(mx,grid[i][j]*dp[i-1][j][0])
                
                # if left cell have both max and min values
                if len(dp[i][j-1])>1:
                    
                    # get minimum of both
                    mn=min(mn,grid[i][j]*dp[i][j-1][0])
                    mn=min(mn,grid[i][j]*dp[i][j-1][1])
                    
                    # get maximum of both
                    mx=max(mx,grid[i][j]*dp[i][j-1][0])
                    mx=max(mx,grid[i][j]*dp[i][j-1][1])
                else:
                    mn=min(mn,grid[i][j]*dp[i][j-1][0])
                    mx=max(mx,grid[i][j]*dp[i][j-1][0])
                
                # if both min and max are same set only one value to current cell
                if mn==mx:
                    dp[i][j]=[mn]
                
                # else set both max and min value till now to current cell
                else:
                    dp[i][j]=[mn,mx]
        
        # ans is stored in last cell, if ans is negative return -1 
        if max(dp[-1][-1])<0:
            return -1
        else:
            # return max of last cell
            return max(dp[-1][-1])%((10**9)+7)
        
