Problem Statement:


You are given an m x n grid rooms initialized with these three possible values.
-1 A wall or an obstacle.
0 A gate.
INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example 1:
Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]
Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]

Example 2:
Input: rooms = [[-1]]
Output: [[-1]]

Example 3:
Input: rooms = [[2147483647]]
Output: [[2147483647]]

Example 4:
Input: rooms = [[0]]
Output: [[0]]


Solution:
class Solution:
    def wallsAndGates(self, rooms: List[List[int]]) -> None:
        """
        Do not return anything, modify rooms in-place instead.
        """
        ###### O(NM); O(NM)
        
        queue=deque([])
        for i in range(len(rooms)):
            for j in range(len(rooms[0])):
                if rooms[i][j]==0:
                    queue.append((i,j))
        # print(queue)
        adjs=[(0,1),(-1,0),(1,0),(0,-1)]
        while queue:
            for each in range(len(queue)):
                x,y=queue.popleft()
                for i,j in adjs:
                    new_x=x+i
                    new_y=y+j
                    if new_x<0 or new_x>=len(rooms) or new_y<0 or new_y>=len(rooms[0]) or rooms[new_x][new_y]!=2147483647:
                        continue
                    rooms[new_x][new_y]=rooms[x][y]+1
                    queue.append((new_x,new_y))
                        
        
