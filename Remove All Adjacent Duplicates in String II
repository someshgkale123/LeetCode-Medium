Problem Statement:

Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to 
concatenate together.
We repeatedly make k duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made.
It is guaranteed that the answer is unique.

Example 1:
Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.

Example 2:
Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"

Example 3:
Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"




Solution:
class Solution:
    def removeDuplicates(self, s: str, k: int) -> str:
        values=[s[0]]
        counts=[1]
        for i in range(1,len(s)):
            if not values:
                values.append(s[i])
                counts.append(1)
                
            elif s[i]==values[-1]:
                counts[-1]+=1
                if counts[-1]==k:
                    counts.pop()
                    values.pop()
            else:
                values.append(s[i])
                counts.append(1)
        ans=[i*j for i,j in zip(values,counts)]
        return "".join(ans)
