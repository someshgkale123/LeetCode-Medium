Problem Statement:

Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.

Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:
Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


Solution:

class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        """stack=num
        value=0
        while value!=k:
            temp=stack
            i=0
            while i!=len(stack):
                a=stack[:i]+stack[i+1:]
                if a<temp:
                    temp=a
                i+=1
            #print(temp)
            stack=temp
            value+=1
        z=list(set(stack))
        if len(z)==1 and z[0]=="0":
            return "".join(z)
        if len(stack)>=1 :
            return stack.lstrip("0")
        else:
            return "0"
            
        """
        stack=[]
        for each in num:
            while k>0 and stack and stack[-1]>each:
                k-=1
                stack.pop()
            stack.append(each)
        if k>0:
            stack=stack[:-k]
            
        temp="".join(stack).lstrip("0")
        return temp or "0"
