Problem Statement:

We are given a binary tree (with root node root), a target node, and an integer value K.
Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
Output: [7,4,1]

Explanation: 
The nodes that are a distance 2 from the target node (with value 5)
have values 7, 4, and 1.

Note that the inputs "root" and "target" are actually TreeNodes.
The descriptions of the inputs above are just serializations of these objects.


SOlution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, K: int) -> List[int]:
        # O(n); O(edges*vertices)
        
        # initialize graph
        graph=defaultdict(set)
        def getgraph(root,parent):
            if not root:
                return
            
            # keep track of parent node which needs to be appended as current node's neighbors
            if parent!=None:
                    graph[root.val].add(parent)
                    
            # check for left neighbors
            if root.left:
                graph[root.val].add(root.left.val)
                getgraph(root.left,root.val)
            
            # check for right neighbors
            if root.right:
                graph[root.val].add(root.right.val)
                getgraph(root.right,root.val)
        getgraph(root,None)
        # print(graph)
        
        ans=[]
        visited=set()
        def getdistance(node,dist,target):
            
            # keep track of visited nodes
            if node in visited:
                return
            visited.add(node)
            
            # if at Kth distance, append to ans 
            if dist==K:
                ans.append(node)
                return
            
            # check neighbor nodes
            for each in graph[node]:
                if each!=target:
                    getdistance(each,dist+1,target)
        getdistance(target.val,0,target.val)
        return ans
