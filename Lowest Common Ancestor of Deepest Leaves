Problem Statement:

Given a rooted binary tree, return the lowest common ancestor of its deepest leaves.
Recall that:
The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is 0, and if the depth of a node is d, the depth of each of its children is d+1.
The lowest common ancestor of a set S of nodes is the node A with the largest depth such that every node in S is in the subtree with root A.
 
Example 1:
Input: root = [1,2,3]
Output: [1,2,3]
Explanation: 
The deepest leaves are the nodes with values 2 and 3.
The lowest common ancestor of these leaves is the node with value 1.
The answer returned is a TreeNode object (not an array) with serialization "[1,2,3]".

Example 2:
Input: root = [1,2,3,4]
Output: [4]

Example 3:
Input: root = [1,2,3,4,5]
Output: [2,4,5]



Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:
        
        def maxdepth(root):
            if not root:
                return 0
            return 1+max(maxdepth(root.left),maxdepth(root.right))
        mx=maxdepth(root)
        
        
        def getlca(root,mx,level):
            if not root:
                return
            if level==mx:
                return root
            left=getlca(root.left,mx,level+1)
            right=getlca(root.right,mx,level+1)
            if left and right:
                return root
            return left or right
        
        return getlca(root,mx-1,0)
        ######## One pass O(n)
        """
        self.res=None
        self.mx=0
        def getlca(root,depth):
            self.mx=max(self.mx,depth)
            if not root:
                return depth
            
            left=getlca(root.left,depth+1)
            right=getlca(root.right,depth+1)
            
            if left == right == self.mx:
                self.res=root
            return max(left,right)
        
        getlca(root,0)
        return self.res
        """
