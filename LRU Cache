Problem Statement:

Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, 
it should invalidate the least recently used item before inserting a new item.
The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:
LRUCache cache = new LRUCache( 2 /* capacity */ );
cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4


Solution:
class LinkedList:
    def __init__(self,val):
        self.val=val
        self.prev=None
        self.next=None
    
class LRUCache:

    def __init__(self, capacity: int):
        self.pair={}
        self.nodes={}
        self.capacity=capacity
        
        self.head=LinkedList(-1)
        self.Tail=LinkedList(-1)
        self.head.next=self.Tail
        self.Tail.prev=self.head
        
    def putfront(self,key,value)-> None:
        Node=LinkedList(key)
        self.pair[key]=value
        self.nodes[key]=Node
        nxt=self.head.next
        self.head.next=Node
        Node.prev=self.head
        Node.next=nxt
        nxt.prev=Node
        
    def get(self, key: int) -> int:
        if key not in self.pair:
            return -1
        self.removekey(self.nodes[key])
        self.putfront(key,self.pair[key])
        return self.pair[key]
    
        
    def removetail(self)-> int:
        prevelem=self.Tail.prev
        prevelem.prev.next=self.Tail
        self.Tail.prev=prevelem.prev
        return prevelem.val
    
    
    
    def removekey(self,node)-> None:
        nxt=node.next
        prevelem=node.prev
        prevelem.next=nxt
        nxt.prev=prevelem
        
    def put(self, key: int, value: int) -> None:
        if key in self.pair:
            self.removekey(self.nodes[key])
            del self.nodes[key]
            del self.pair[key]
            
        if len(self.nodes)==self.capacity:
            removeelem=self.removetail()
            if removeelem in self.pair:
                del self.nodes[removeelem]
                del self.pair[removeelem]
            
        self.putfront(key,value)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
