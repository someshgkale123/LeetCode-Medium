Problem Statement:

You need to find the largest value in each row of a binary tree.

Example:
Input: 

          1
         / \
        3   2
       / \   \  
      5   3   9 

Output: [1, 3, 9]



SOlution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def largestValues(self, root: TreeNode) -> List[int]:
        ######### BFS iterative approach
        if not root:
            return 
        res=[root.val]
        stack=[root]
        while stack:
            ans=float("-inf")
            temp=[]
            for i in stack:
                if i.left:
                    temp.append(i.left)
                    ans=max(ans,i.left.val)
                if i.right:
                    temp.append(i.right)
                    ans=max(ans,i.right.val)
            if temp:
                stack=temp
                res+=[ans]
            else:
                return res
        
	######### DFS recursive approach
        dict={}
        def dfs(root,level):
            if not root:
                return 
            if level in dict:
                dict[level]=max(root.val,dict[level])
            else:
                dict[level]=root.val
            dfs(root.left,level+1)
            dfs(root.right,level+1)
        dfs(root,0)
        return [i for i in dict.values()]
