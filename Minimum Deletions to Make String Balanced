Problem Statement:

You are given a string s consisting only of characters 'a' and 'b'​​​​.
You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.
Return the minimum number of deletions needed to make s balanced.

Example 1:
Input: s = "aababbab"
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 ("aababbab" -> "aaabbb"), or
Delete the characters at 0-indexed positions 3 and 6 ("aababbab" -> "aabbbb").

Example 2:
Input: s = "bbaaaaabb"
Output: 2
Explanation: The only solution is to delete the first two characters.



Solution:
class Solution:
    def minimumDeletions(self, s: str) -> int:
        
        ####### O(n) ; O(1)
        
        # get freq of a and b in the string
        freq={"a":0,
              "b":0}
        
        for each in s:
            freq[each]+=1
        
        # get freq of previously visited a and b 
        previous={"a":0,
                  "b":0}
        
        mn=float("inf")
        
        # traverse till "-" viz. the end partition, 
        # for every partition look for count of previous b's and next a's which is the cost of balancing the string
        
        for each in s+"-":
            mn=min(mn,previous["b"]+freq["a"])
            if each=="-":
                break
            previous[each]+=1
            freq[each]-=1
            
        return mn
