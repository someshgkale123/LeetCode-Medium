Problem Statement:

You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.
However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.
Given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.

Example 1:
Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
Output: 34
Explanation: You can choose all the players.

Example 2:
Input: scores = [4,5,6,5], ages = [2,1,2,1]
Output: 16
Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.

Example 3:
Input: scores = [1,2,3,5], ages = [8,9,10,1]
Output: 6
Explanation: It is best to choose the first 3 players. 


Solution:
class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        players=[]
        
        # for each age and score sort the ages in increasing order wrt. scores
        for i,j in zip(scores,ages):
            players.append((j,i))
        players.sort(key=lambda x:(x[0],x[1]))
        # print(players)
        
        """
        ######## TLE
        self.mx=0
        visited={}
        def getmax(prev,prevmax,index,total):    
            if index>=len(scores):
                self.mx=max(self.mx,total)
                return
            
            if index in visited and visited[index]<total:
                return
            
            for each in range(len(players)):
                if players[each]=="v":
                    continue
                age,score=players[each]
                players[each]="v"
                if prev:
                    
                    if prevmax<=score:
                        getmax(age,max(prevmax,score),each+1,total+score)
                    else:
                        getmax(age,prevmax,each+1,total)
                        
                else:               
                    getmax(age,score,each+1,total+score)
                    
                players[each]=(age,score)
                
            if index in visited:
                visited[index]=max(visited[index],total)
            else:
                visited[index]=total
            
        getmax(None,0,0,0)
        return self.mx
        """
        # print(players)
        ###### O(N^2);O(N)
        
        mx=0
        
        # initialize dp
        dp=[0]*len(players)
        
        for i in range(len(players)):
            
            # set curr index value to dp[i]
            dp[i]=players[i][1]
            
            # now check if previous indices with value less than or equal to curr value
            for j in range(0,i):
                
                # if condition satisfied, set dp[i] = maximum of (current value, previous index value + current value)
                if players[j][1]<=players[i][1]:
                    dp[i]=max(dp[i],dp[j]+players[i][1])
            
            # keep track of maximum value
            mx=max(mx,dp[i])
        
        return mx
