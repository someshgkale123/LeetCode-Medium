Problem Statement:

There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.

Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
             
             
             
 Solution:
 class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        cnt=0
        indegree=collections.defaultdict(int)
        graph=collections.defaultdict(list)
        for i,j in prerequisites:
            graph[j].append(i)
            indegree[i]+=1
        
        queue=[]
        for i in range(numCourses):
            if indegree[i]==0:
                del indegree[i]
                queue.append(i)
                
        if not queue:
            return False
        while queue:
            temp=queue.pop(0)
            cnt+=1
            for i in graph[temp]:
                indegree[i]-=1
                if indegree[i]==0:
                    del indegree[i]
                    queue.append(i)
                    
        return cnt==numCourses
