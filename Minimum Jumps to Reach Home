Problem Statement:

A certain bug's home is on the x-axis at position x. Help them get there from position 0.
The bug jumps according to the following rules:
It can jump exactly a positions forward (to the right).
It can jump exactly b positions backward (to the left).
It cannot jump backward twice in a row.
It cannot jump to any forbidden positions.
The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.
Given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.

Example 1:
Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
Output: 3
Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.

Example 2:
Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
Output: -1

Example 3:
Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
Output: 2
Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.



Solution:
class Solution:
    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:
        ##### O(maxlimit)
        
        # converting forbidden list to set for constant lookup
        forbidden=set(forbidden)
        
        # set maxlimit for upper bound of jumps
        maxlimit=2000+a+b
        
        # initialize visited set
        visited=set()
        queue=[(0,0,"")]
        
        while queue:
            curr,jumps,direction=queue.pop(0)
            
            # if curr position is equal to x, return total jumps made
            if curr==x:
                # print(curr,jumps)
                return jumps
            
            # if curr position is greater than upper bound or lower than lower bound or marked as forbidden, not jump on this position
            if curr>maxlimit or curr<0 or curr in forbidden:
                continue
                
            # if curr position is reached by direction, dont jump again
            if (curr,direction) in visited:
                continue
            
            # mark this position and direction as visited
            visited.add((curr,direction))
            
            # append forward jump position and direction
            queue.append((curr+a,jumps+1,"f"))
            
            # if previously made backward jump, dont jump backward again else jump backward and mark direction as backward
            if direction!="b":
                queue.append((curr-b,jumps+1,"b"))
        
        # if not possible to reach home        
        return -1
            
