Problem Statement:

A string is called happy if it does not have any of the strings 'aaa', 'bbb' or 'ccc' as a substring.
Given three integers a, b and c, return any string s, which satisfies following conditions:
s is happy and longest possible.
s contains at most a occurrences of the letter 'a', at most b occurrences of the letter 'b' and at most c occurrences of the letter 'c'.
s will only contain 'a', 'b' and 'c' letters.
If there is no such string s return the empty string "".

Example 1:
Input: a = 1, b = 1, c = 7
Output: "ccaccbcc"
Explanation: "ccbccacc" would also be a correct answer.

Example 2:
Input: a = 2, b = 2, c = 1
Output: "aabbc"

Example 3:
Input: a = 7, b = 1, c = 0
Output: "aabaa"
Explanation: It's the only correct answer in this case.


Solution:
class Solution:
    def longestDiverseString(self, a: int, b: int, c: int) -> str:
        
        ###### O(a+b+c);O(1)
        
        # initialize maxheap
        heap=[]
        
        values={"a":a,"b":b,"c":c}
        
        for i,j in values.items():
            if j==0:
                continue
            heappush(heap,(-j,i))
        
        ans=""
        while heap:
            # if last appended char is same as top of heap, pop it temporarily    
            tempvalue,tempchar=None,None
            if ans and heap[0][1]==ans[-1]:
                tempvalue,tempchar=heappop(heap)
            
            # if heap is not empty
            if heap:
                # pop max freq char
                value,char=heappop(heap)
                
                # check if temporary char is popped earlier or not
                if tempvalue:
                    
                    # push it back to heap
                    heappush(heap,(tempvalue,tempchar))
                    
                    # add current char to ans and check if more same chars are present or not
                    ans+=char
                    if (-value)-1>0:
                        
                        # push it back to heap with decrementing curr used char
                        heappush(heap,(-((-value)-1),char))
                
                # if temporary char is empty i.e. no element was popped before
                else:
                    
                    # used 2 curr chars and add to ans and push it back to heap
                    if -value>=2:
                        ans+=char*2
                        heappush(heap,(-((-value)-2),char))
                    
                    # if curr count of char is less than 2 use it completely
                    else:
                        ans+=char*-value
        return ans
