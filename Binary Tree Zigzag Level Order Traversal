Problem Statement:

Given a binary tree, return the zigzag level order traversal of its nodes' values. 
(ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]


SOlution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return None
        
        stack=[root]
        depth=0
        res=[[root.val]]
        while stack:
            temp=[]
            values=[]
            for i in stack:
                if i.left:
                    temp.append(i.left)
                    values.append(i.left.val)
                if i.right:
                    temp.append(i.right)
                    values.append(i.right.val)
            if temp:
                stack=temp
                if depth%2!=0:
                    res.append(values)
                else:
                    res.append(values[::-1])
            else:
                break
            depth+=1
        return res
