Problem Statement:

Given an array of non-negative integers arr, you are initially positioned at start index of the array. 
When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.
Notice that you can not jump outside of the array at any time.

Example 1:
Input: arr = [4,2,3,0,3,1,2], start = 5
Output: true
Explanation: 
All possible ways to reach at index 3 with value 0 are: 
index 5 -> index 4 -> index 1 -> index 3 
index 5 -> index 6 -> index 4 -> index 1 -> index 3 

Example 2:
Input: arr = [4,2,3,0,3,1,2], start = 0
Output: true 
Explanation: 
One possible way to reach at index 3 with value 0 is: 
index 0 -> index 4 -> index 1 -> index 3

Example 3:
Input: arr = [3,0,2,1,2], start = 2
Output: false
Explanation: There is no way to reach at index 1 with value 0.
 
 
Solution:
class Solution:
    def canReach(self, arr: List[int], start: int) -> bool:
        temp=[start]
        check=set()
        while temp:
            a=temp.pop(0)
            if arr[a]==0:
                return True
            if (arr[a]+a)<=len(arr)-1 and (arr[a]+a) not in check:
                check.add(arr[a]+a)
                temp.append(arr[a]+a)
                    
            if (a-arr[a])>=0 and (a-arr[a]) not in check:
                check.add(a-arr[a])
                temp.append(a-arr[a])
        return False
