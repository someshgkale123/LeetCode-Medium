Problem Statement:

There are N network nodes, labelled 1 to N.
Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel 
from source to target.
Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
Output: 2



Solution:
class Solution:
    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:
        """
        ########### Using bfs approach (Dijkstra's)
        graph=defaultdict(list)
        for i,j,k in times:
            graph[i].append((j,k))
            
        queue=deque()
        for neigh,time in sorted(graph[K],key=lambda x:x[1]):
            queue.append([K,neigh,time])
        #print(queue)
        if not queue:
            return -1
        
        visited={K:0}
        #print(queue)
        while queue:
            #print(queue)
            src,target,tm=queue.popleft()
            if target in visited:
                continue
            visited[target]=tm
            for neigh,time in graph[target]:
                if neigh not in visited:
                    queue.append([target,neigh,time+tm])
            queue=deque(sorted(queue,key=lambda x:x[2]))
        #print(visited)
        if len(visited)!=N:
            return -1
        else:
            return max(visited.values())
        """
        ###################### Using minheap approach O(E+ElogE),O(E+V)
       
        graph=defaultdict(list)
        for i,j,k in times:
            graph[i].append((j,k))
            
        ans={}
        minheap=[(0,K)]
        while minheap:
            dist,node=heapq.heappop(minheap)
            if node in ans:
                continue
            ans[node]=dist
            for neigh,ndist in graph[node]:
                if neigh not in ans:
                    heapq.heappush(minheap,(dist+ndist,neigh))
        if len(ans)!=N:
            return -1
        else:
            return max(ans.values())
