Problem Statement:

There are N network nodes, labelled 1 to N.
Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel 
from source to target.
Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
Output: 2



Solution:
class Solution:
    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:
        """
        ########### Using bfs approach (Dijkstra's)
        time=defaultdict(int)
        graph=defaultdict(list)
        for i,j,k in times:
            graph[i]+=[j]
            time[(i,j)]=k
        
        queue=deque()
        for each in graph[K]:
            queue.append([K,each,time[(K,each)]])
        #print(queue)
        if not queue:
            return -1
        totaltime=0
        visited={K:0}
        #print(queue)
        while queue:
            for i in range(len(queue)):
                src,target,tm=queue.popleft()
                #print(src,target,tm)
                if target in visited:
                    visited[target]=min(tm,visited[target])
                    continue
                visited[target]=tm
                
                for each in graph[target]:
                    queue.append([target,each,time[(target,each)]+tm])
            
        #print(visited)
        ans=0
        
        for i in range(1,N+1):
            if i not in visited:
                return -1
            else:
                ans=max(ans,visited[i])
        return ans
        """
        ###################### Using minheap approach O(E+ElogE),O(E+V)
       
        graph=defaultdict(list)
        for i,j,k in times:
            graph[i].append((j,k))
            
        ans={}
        minheap=[(0,K)]
        while minheap:
            dist,node=heapq.heappop(minheap)
            if node in ans:
                continue
            ans[node]=dist
            for neigh,ndist in graph[node]:
                if neigh not in ans:
                    heapq.heappush(minheap,(dist+ndist,neigh))
        if len(ans)!=N:
            return -1
        else:
            return max(ans.values())
